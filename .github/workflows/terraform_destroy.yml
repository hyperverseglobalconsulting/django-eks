name: 'Terraform Destroy'

on:
  workflow_dispatch:
    inputs:
      end_task:
        description: 'Override the last task to run (1=root)'
        required: true
        default: '1'

permissions:
  contents: read

jobs:
  terraform_root:
    name: 'Terraform AWS Infra'
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    env:
      TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_region: ${{ vars.AWS_REGION }}
      TF_VAR_availability_zones: ${{ vars.AVAILABILITY_ZONES }}
      TF_VAR_bucket_name: ${{ vars.BUCKET_NAME }}
      TF_VAR_cluster_name: ${{ vars.CLUSTER_NAME }}
      TF_VAR_vpc_name: ${{ vars.VPC_NAME }}
      TF_VAR_igw_name: ${{ vars.IGW_NAME }}
      TF_VAR_public_route_table_name: ${{ vars.PUBLIC_ROUTE_TABLE_NAME }}
      TF_VAR_public_subnet_name_prefix: ${{ vars.PUBLIC_SUBNET_NAME_PREFIX }}
      TF_VAR_ng_general_ondemand: ${{ vars.NG_GENERAL_ONDEMAND }}
      TF_VAR_general_ondemand_instance_types: ${{ vars.GENERAL_ONDEMAND_INSTANCE_TYPES }}
      TF_VAR_private_cidr_blocks: ${{ vars.PRIVATE_CIDR_BLOCKS }}
      TF_VAR_public_cidr_blocks: ${{ vars.PUBLIC_CIDR_BLOCKS }}
      TF_VAR_vpc_cidr: ${{ vars.VPC_CIDR }}
      TF_VAR_registry_org: ${{ vars.GIT_ORG }}
      TF_VAR_infra_repo_name: ${{ vars.INFRA_REPO_NAME}}
      TF_VAR_general_ondemand_max_nodes: ${{vars.GENERAL_ONDEMAND_MAX_NODES}}
      TF_VAR_general_ondemand_desired_nodes: ${{vars.GENERAL_ONDEMAND_DESIRED_NODES}}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    # Sets up Terraform CLI on the GitHub Actions runner
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init - Root
      run: terraform init
      working-directory: ./infra
      if: ${{ inputs.end_task == '1' }}

    # Generates an execution plan for Terraform destroy
    - name: Terraform Plan Destroy - Root
      run: terraform plan -destroy -input=false -refresh=true -out=tfplan_destroy.out
      working-directory: ./infra
      if: ${{ inputs.end_task == '1' }}

    # Shows execution for Terraform destroy
    - name: Terraform Show Destroy - Root
      run: terraform show tfplan_destroy.out
      working-directory: ./infra
      if: ${{ inputs.end_task == '1' }}

    # Manually trigger Terraform destroy
    - name: Terraform Destroy
      run: terraform apply -destroy -auto-approve -input=false tfplan_destroy.out
      working-directory: ./infra
      if: ${{ inputs.end_task == '1' }}

